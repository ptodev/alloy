name: Shared Windows container publish workflow

on:
  workflow_call:
    inputs:
      img-name:
        required: true
        type: string
      push:
        required: false
        type: boolean
        default: true
      dev:
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  id-token: write

jobs:
  publish_windows_container:
    name: Publish Alloy Windows container
    strategy:
      matrix:
        os: [windows-2022, windows-2019]
    # strategy:
    #   matrix:
    #     base_image:
    #     - "mcr.microsoft.com/windows/nanoserver:ltsc2025"
    #     - "mcr.microsoft.com/windows/nanoserver:ltsc2022"
    #     - "mcr.microsoft.com/windows/nanoserver:ltsc2019"
    runs-on: windows-2025
    steps:
      # This step needs to run before "Checkout code".
      # That's because it generates a new file.
      # We don't want this file to end up in the repo directory.
      # Then "tools/image-tag" would get confused because "git status" no longer reports a clean repo.
      # - name: Login to DockerHub (from vault)
      #   uses: grafana/shared-workflows/actions/dockerhub-login@13fb504e3bfe323c1188bf244970d94b2d336e86 # dockerhub-login-v1.0.1

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false

    - name: Tag dev
      if: ${{ inputs.dev }}
      run: |
        & "C:/Program Files/git/bin/bash.exe" -c './tools/tag-dev'

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version-file: go.mod
        cache: false

    - run: make generate-ui
    - run: echo "GO_TAGS=builtinassets" | Out-File -FilePath $env:GITHUB_ENV -Append
    - run: echo "GOOS=windows" | Out-File -FilePath $env:GITHUB_ENV -Append
    - run: echo "GOARCH=amd64" | Out-File -FilePath $env:GITHUB_ENV -Append
    - run: make alloy
    # Copy the binary outside of the build directory,
    # because the build directiry is in the .dockerignore file.
    - run: cp ./build/alloy .
    - run: pwd
    - run: ls .
    - run: ls ./build/

    # # TODO: See if we can reuse the same artifact for all builds:
    # # https://github.com/actions/upload-artifact
    # - name: Build the container
    #   run: |
    #     docker build -t "ptodev/alloy" --build-arg BASE_IMAGE_WINDOWS=${{ matrix.base_image }} -f ./Dockerfile.windows --isolation=hyperv .

    # - run: make alloy-image-windows
    #   env:
    #     ALLOY_IMAGE_WINDOWS: "ptodev/alloy"
    #     BASE_IMAGE_WINDOWS: ${{ matrix.base_image }}

    # - name: Test the container
    #   run: |
    #     docker run --name alloyTest ptodev/alloy-dev:latest
    #     $i=1
    #     for(;$i -le 10;$i++)
    #     {
    #       docker logs alloyTest
    #     }

    - name: Build and publish the container
      # TODO: Run "make alloy-image-windows" instead?
      run: |
        & "C:/Program Files/git/bin/bash.exe" -c 'PUSH_ALLOY_IMAGE=${SHOULD_PUSH_ALLOY_IMAGE} WINDOWS_VERSION=${{matrix.os}} ./tools/ci/docker-containers-windows ${IMG_NAME}'
      env:
        SHOULD_PUSH_ALLOY_IMAGE: ${{ inputs.push }}
        IMG_NAME: ${{ inputs.img-name }}
        # GO_VERSION: ${{ steps.get_go_version.outputs.alloy_go_version }}

    # - name: Push the container
    #   if: inputs.push
    #   run: |
    #     docker push "ptodev/alloy"
